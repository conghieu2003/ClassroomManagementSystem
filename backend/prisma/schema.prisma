generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int       @id(map: "PK__Account__3213E83F76EEF490") @default(autoincrement())
  username  String    @unique(map: "UQ__Account__F3DBC5724A5F308B") @db.NVarChar(255)
  password  String    @db.NVarChar(255)
  role      String    @db.NVarChar(255)
  isActive  Boolean?  @default(true, map: "DF__Account__isActiv__4AB81AF0")
  createdAt DateTime? @default(now(), map: "DF__Account__created__4BAC3F29")
  updatedAt DateTime? @default(now(), map: "DF__Account__updated__4CA06362") @updatedAt
  user      User?
}

model User {
  id              Int              @id(map: "PK__User__3213E83F73E710E2") @default(autoincrement())
  accountId       Int              @unique(map: "UQ__User__F267251F2CA85D0D")
  fullName        String           @db.NVarChar(255)
  email           String           @unique(map: "UQ__User__AB6E6164D2EE7F25") @db.NVarChar(255)
  phone           String?          @db.NVarChar(20)
  address         String?          @db.NVarChar(500)
  avatar          String?          @db.NVarChar(500)
  gender          String?          @db.NVarChar(10)
  dateOfBirth     DateTime?        @db.Date
  createdAt       DateTime?        @default(now(), map: "DF__User__createdAt__5165187F")
  updatedAt       DateTime?        @default(now(), map: "DF__User__updatedAt__52593CB8") @updatedAt
  academicProfile AcademicProfile?
  familyInfo      FamilyInfo?
  personalProfile PersonalProfile?
  student         Student?
  teacher         Teacher?
  account         Account          @relation(fields: [accountId], references: [id], onDelete: Cascade, map: "FK__User__accountId__534D60F1")
}

model PersonalProfile {
  id                Int       @id(map: "PK__Personal__3213E83F00AB00B8") @default(autoincrement())
  userId            Int       @unique(map: "UQ__Personal__CB9A1CFE396872E5")
  idCardNumber      String?   @db.NVarChar(20)
  idCardIssueDate   DateTime? @db.Date
  idCardIssuePlace  String?   @db.NVarChar(255)
  placeOfBirth      String?   @db.NVarChar(255)
  permanentAddress  String?   @db.NVarChar(500)
  phoneEmergency    String?   @db.NVarChar(20)
  bankName          String?   @db.NVarChar(255)
  bankBranch        String?   @db.NVarChar(255)
  bankAccountNumber String?   @db.NVarChar(50)
  createdAt         DateTime? @default(now(), map: "DF__PersonalP__creat__571DF1D5")
  updatedAt         DateTime? @default(now(), map: "DF__PersonalP__updat__5812160E") @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK__PersonalP__userI__59063A47")
}

model FamilyInfo {
  id                Int       @id(map: "PK__FamilyIn__3213E83F337E28EC") @default(autoincrement())
  userId            Int       @unique(map: "UQ__FamilyIn__CB9A1CFEC9230836")
  fatherFullName    String?   @db.NVarChar(255)
  fatherYearOfBirth Int?
  fatherPhone       String?   @db.NVarChar(20)
  motherFullName    String?   @db.NVarChar(255)
  motherYearOfBirth Int?
  motherPhone       String?   @db.NVarChar(20)
  createdAt         DateTime? @default(now(), map: "DF__FamilyInf__creat__5CD6CB2B")
  updatedAt         DateTime? @default(now(), map: "DF__FamilyInf__updat__5DCAEF64") @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK__FamilyInf__userI__5EBF139D")
}

model AcademicProfile {
  id             Int       @id(map: "PK__Academic__3213E83F19728E59") @default(autoincrement())
  userId         Int       @unique(map: "UQ__Academic__CB9A1CFEB7D58C80")
  role           String    @db.NVarChar(255)
  campus         String?   @db.NVarChar(255)
  trainingType   String?   @db.NVarChar(255)
  degreeLevel    String?   @db.NVarChar(255)
  academicYear   String?   @db.NVarChar(20)
  enrollmentDate DateTime? @db.Date
  classCode      String?   @db.NVarChar(50)
  title          String?   @db.NVarChar(255)
  createdAt      DateTime? @default(now(), map: "DF__AcademicP__creat__628FA481")
  updatedAt      DateTime? @default(now(), map: "DF__AcademicP__updat__6383C8BA") @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK__AcademicP__userI__6477ECF3")
}

model Teacher {
  id           Int       @id(map: "PK__Teacher__3213E83FABB64C9C") @default(autoincrement())
  userId       Int       @unique(map: "UQ__Teacher__CB9A1CFE0C55685E")
  teacherCode  String    @unique(map: "UQ__Teacher__3644755CF3D8D996") @db.NVarChar(50)
  departmentId Int?
  majorId      Int?
  createdAt    DateTime? @default(now(), map: "DF__Teacher__created__693CA210")
  updatedAt    DateTime? @default(now(), map: "DF__Teacher__updated__6A30C649")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK__Teacher__userId__6B24EA82")
}

model Student {
  id          Int       @id(map: "PK__Student__3213E83F5833E0B0") @default(autoincrement())
  userId      Int       @unique(map: "UQ__Student__CB9A1CFE6913CE7C")
  studentCode String    @unique(map: "UQ__Student__48F7EF36DC1A52A7") @db.NVarChar(50)
  classId     Int?
  createdAt   DateTime? @default(now(), map: "DF__Student__created__6FE99F9F")
  updatedAt   DateTime? @default(now(), map: "DF__Student__updated__70DDC3D8")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK__Student__userId__71D1E811")
}
