// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = "sqlserver://CONGHIEU:1433;database=ClassroomManagement;user=sa;password=sapassword;encrypt=true;trustServerCertificate=true;connection_limit=20;pool_timeout=0"
}

model Account {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?
}

model User {
  id           Int       @id @default(autoincrement())
  accountId    Int       @unique
  fullName     String
  email        String    @unique
  phone        String?
  address      String?
  avatar       String?
  gender       String?   // 'male', 'female', 'other'
  dateOfBirth  DateTime? @db.Date // Date of birth
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  account      Account   @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacher      Teacher?
  student      Student?

  // Extended profiles
  personalProfile PersonalProfile?
  familyInfo      FamilyInfo?
  academicProfile AcademicProfile?
}

// Mirrors PersonalProfile in init.sql
model PersonalProfile {
  id                 Int       @id @default(autoincrement())
  userId             Int       @unique
  idCardNumber       String?
  idCardIssueDate    DateTime? @db.Date
  idCardIssuePlace   String?
  placeOfBirth       String?
  permanentAddress   String?
  phoneEmergency     String?
  bankName           String?
  bankBranch         String?
  bankAccountNumber  String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// Mirrors FamilyInfo in init.sql
model FamilyInfo {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  fatherFullName    String?
  fatherYearOfBirth Int?
  fatherPhone       String?
  motherFullName    String?
  motherYearOfBirth Int?
  motherPhone       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// Mirrors AcademicProfile in init.sql
model AcademicProfile {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  role           String
  campus         String?
  trainingType   String?
  degreeLevel    String?
  academicYear   String?
  enrollmentDate DateTime? @db.Date
  classCode      String?
  title          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Teacher {
  id           Int       @id @default(autoincrement())
  userId       Int       @unique
  teacherCode  String    @unique
  departmentId Int?
  majorId      Int?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classes      Class[]
  schedules    Schedule[]
}

model Student {
  id              Int                 @id @default(autoincrement())
  userId          Int                 @unique
  studentCode     String              @unique
  departmentId    Int?
  majorId         Int?
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  registrations   ClassRegistration[]
}

model Class {
  id              Int                 @id @default(autoincrement())
  code            String              @unique
  className       String
  subjectName     String
  subjectCode     String
  credits         Int
  teacherId       Int
  semester        String
  academicYear    String
  maxStudents     Int
  totalWeeks      Int
  startDate       DateTime            @db.Date
  endDate         DateTime            @db.Date
  description     String?
  teacher         Teacher             @relation(fields: [teacherId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  registrations   ClassRegistration[]
  schedules       Schedule[]
  classTypes      ClassType[]
}

model ClassType {
  id           Int        @id @default(autoincrement())
  classId      Int
  type         String
  maxStudents  Int
  groupNumber  Int?
  class        Class      @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  groups       ClassGroup[]
  schedules    Schedule[]
}

model ClassGroup {
  id           Int        @id @default(autoincrement())
  classTypeId  Int
  groupName    String
  maxStudents  Int
  classType    ClassType  @relation(fields: [classTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  registrations ClassRegistration[]
  schedules    Schedule[]
}

model ClassRegistration {
  id              Int        @id @default(autoincrement())
  classId         Int
  studentId       Int
  practiceGroupId Int?
  status          String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  class           Class      @relation(fields: [classId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student         Student    @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  practiceGroup   ClassGroup? @relation(fields: [practiceGroupId], references: [id])
}

model ClassRoom {
  id          Int            @id @default(autoincrement())
  code        String         @unique
  name        String
  capacity    Int
  building    String
  floor       Int
  type        String
  description String?
  schedules   Schedule[]
  requests    RoomRequest[]
}

model Schedule {
  id           Int        @id @default(autoincrement())
  classId      Int
  classTypeId  Int
  classGroupId Int?
  classRoomId  Int
  teacherId    Int
  dayOfWeek    Int
  timeSlotId   Int
  weekNumber   Int
  date         DateTime   @db.Date
  status       String     @default("normal")
  note         String?
  class        Class      @relation(fields: [classId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  classType    ClassType  @relation(fields: [classTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  classGroup   ClassGroup? @relation(fields: [classGroupId], references: [id])
  classRoom    ClassRoom  @relation(fields: [classRoomId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher      Teacher    @relation(fields: [teacherId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  timeSlot     TimeSlot   @relation(fields: [timeSlotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model TimeSlot {
  id          Int         @id @default(autoincrement())
  slotName    String
  startTime   DateTime    @db.Time
  endTime     DateTime    @db.Time
  shift       String
  schedules   Schedule[]
  roomRequests RoomRequest[]
}

model RoomRequest {
  id          Int       @id @default(autoincrement())
  classRoomId Int
  requesterId Int
  purpose     String
  date        DateTime  @db.Date
  timeSlotId  Int
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  classRoom   ClassRoom @relation(fields: [classRoomId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  timeSlot    TimeSlot  @relation(fields: [timeSlotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}