generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int       @id @default(autoincrement())
  username  String    @unique @db.NVarChar(255)
  password  String    @db.NVarChar(255)
  role      String    @db.NVarChar(50)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  user      User?
}

model User {
  id              Int              @id @default(autoincrement())
  accountId       Int              @unique
  fullName        String           @db.NVarChar(255)
  email           String           @unique @db.NVarChar(255)
  phone           String?          @db.NVarChar(20)
  address         String?          @db.NVarChar(255)
  avatar          String?          @db.NVarChar(500)
  gender          String?          @db.NVarChar(10)
  dateOfBirth     DateTime?        @db.Date
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  academicProfile AcademicProfile?
  familyInfo      FamilyInfo?
  personalProfile PersonalProfile?
  roomRequests    RoomRequest[]    @relation("RoomRequestRequester")
  student         Student?
  teacher         Teacher?
  account         Account          @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model PersonalProfile {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  idCardNumber      String?   @db.NVarChar(50)
  idCardIssueDate   DateTime? @db.Date
  idCardIssuePlace  String?   @db.NVarChar(255)
  placeOfBirth      String?   @db.NVarChar(255)
  permanentAddress  String?   @db.NVarChar(500)
  phoneEmergency    String?   @db.NVarChar(50)
  bankName          String?   @db.NVarChar(255)
  bankBranch        String?   @db.NVarChar(255)
  bankAccountNumber String?   @db.NVarChar(50)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FamilyInfo {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  fatherFullName    String?   @db.NVarChar(255)
  fatherYearOfBirth Int?
  fatherPhone       String?   @db.NVarChar(50)
  motherFullName    String?   @db.NVarChar(255)
  motherYearOfBirth Int?
  motherPhone       String?   @db.NVarChar(50)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AcademicProfile {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  role           String    @db.NVarChar(20)
  campus         String?   @db.NVarChar(255)
  trainingType   String?   @db.NVarChar(255)
  degreeLevel    String?   @db.NVarChar(255)
  academicYear   String?   @db.NVarChar(50)
  enrollmentDate DateTime? @db.Date
  classCode      String?   @db.NVarChar(50)
  title          String?   @db.NVarChar(255)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Department {
  id        Int       @id @default(autoincrement())
  code      String    @unique @db.NVarChar(50)
  name      String    @unique @db.NVarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  majors    Major[]
  students  Student[] @relation("StudentDepartment")
  teachers  Teacher[] @relation("TeacherDepartment")
}

model Major {
  id           Int        @id @default(autoincrement())
  code         String     @unique @db.NVarChar(50)
  name         String     @db.NVarChar(255)
  departmentId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  department   Department @relation(fields: [departmentId], references: [id])
  students     Student[]  @relation("StudentMajor")
  teachers     Teacher[]  @relation("TeacherMajor")
}

model Teacher {
  id             Int             @id @default(autoincrement())
  userId         Int             @unique
  teacherCode    String          @unique @db.NVarChar(50)
  departmentId   Int?
  majorId        Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  classes        Class[]         @relation("ClassTeacher")
  classSchedules ClassSchedule[] @relation("ClassScheduleTeacher")

  department     Department?     @relation("TeacherDepartment", fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  major          Major?          @relation("TeacherMajor", fields: [majorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Student {
  id            Int            @id @default(autoincrement())
  userId        Int            @unique
  studentCode   String         @unique @db.NVarChar(50)
  departmentId  Int?
  majorId       Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  classStudents ClassStudent[]
  department    Department?    @relation("StudentDepartment", fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  major         Major?         @relation("StudentMajor", fields: [majorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Class {
  id                Int             @id @default(autoincrement())
  code              String          @unique @db.NVarChar(50)
  className         String          @db.NVarChar(255)
  subjectName       String          @db.NVarChar(255)
  subjectCode       String          @db.NVarChar(50)
  credits           Int
  teacherId         Int
  semester          String          @db.NVarChar(50)
  academicYear      String          @db.NVarChar(50)
  maxStudents       Int
  totalWeeks        Int
  startDate         DateTime        @db.Date
  endDate           DateTime        @db.Date
  classType         String          @db.NVarChar(50) @default("theory")
  practiceEnabled   Boolean         @default(false)
  maxPracticeGroups Int?
  description       String?         @db.NVarChar(Max)
  teacher           Teacher         @relation("ClassTeacher", fields: [teacherId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  classSchedules    ClassSchedule[]
  classStudents     ClassStudent[]

  @@map("Class")
}

model ClassStudent {
  id          Int       @id @default(autoincrement())
  classId     Int
  studentId   Int
  groupNumber Int?
  status      String    @default("active") @db.NVarChar(50)
  joinedAt    DateTime  @default(now())
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  student     Student   @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([classId, studentId])
  @@map("ClassStudent")
}

model ClassRoom {
  id             Int             @id @default(autoincrement())
  code           String          @unique @db.NVarChar(50)
  name           String          @db.NVarChar(255)
  capacity       Int
  building       String          @db.NVarChar(255)
  floor          Int
  campus         String?         @db.NVarChar(255)
  type           String          @db.NVarChar(50)
  description    String?         @db.NVarChar(Max)
  classSchedules ClassSchedule[]
  roomRequests   RoomRequest[]
}

model TimeSlot {
  id             Int             @id @default(autoincrement())
  slotName       String          @db.NVarChar(50)
  startTime      DateTime        @db.Time
  endTime        DateTime        @db.Time
  shift          String          @db.NVarChar(50)
  classSchedules ClassSchedule[]
  roomRequests   RoomRequest[]
}

model ClassSchedule {
  id          Int       @id @default(autoincrement())
  classId     Int
  teacherId   Int
  classRoomId Int
  dayOfWeek   Int
  timeSlotId  Int
  weekPattern String    @default("weekly") @db.NVarChar(50)
  startWeek   Int
  endWeek     Int
  status      String    @default("active") @db.NVarChar(50)
  note        String?   @db.NVarChar(Max)
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  classRoom   ClassRoom @relation(fields: [classRoomId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher     Teacher   @relation("ClassScheduleTeacher", fields: [teacherId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  timeSlot    TimeSlot  @relation(fields: [timeSlotId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([dayOfWeek, timeSlotId, classRoomId])
  @@unique([dayOfWeek, timeSlotId, teacherId])
}

model RoomRequest {
  id          Int       @id @default(autoincrement())
  classRoomId Int
  requesterId Int
  purpose     String    @db.NVarChar(Max)
  date        DateTime  @db.Date
  timeSlotId  Int
  status      String    @default("pending") @db.NVarChar(50)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  classRoom   ClassRoom @relation(fields: [classRoomId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  requester   User      @relation("RoomRequestRequester", fields: [requesterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  timeSlot    TimeSlot  @relation(fields: [timeSlotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
