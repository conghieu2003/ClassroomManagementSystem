generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int       @id(map: "PK__Account__3213E83FD522FB75") @default(autoincrement())
  username  String    @unique(map: "UQ__Account__F3DBC572D9D78718") @db.NVarChar(255)
  password  String    @db.NVarChar(255)
  role      String    @db.NVarChar(50)
  isActive  Boolean?  @default(true, map: "DF__Account__isActiv__4BAC3F29")
  createdAt DateTime? @default(now(), map: "DF__Account__created__4CA06362") @db.DateTime
  updatedAt DateTime? @default(now(), map: "DF__Account__updated__4D94879B") @updatedAt @db.DateTime
  user      User?
}

model User {
  id                Int               @id(map: "PK__User__3213E83F456F33BA") @default(autoincrement())
  accountId         Int               @unique(map: "UQ__User__F267251F2F45A807")
  fullName          String            @db.NVarChar(255)
  email             String            @unique(map: "UQ__User__AB6E6164A040CA27") @db.NVarChar(255)
  phone             String?           @db.NVarChar(20)
  address           String?           @db.NVarChar(255)
  avatar            String?           @db.NVarChar(500)
  gender            String?           @db.NVarChar(10)
  dateOfBirth       DateTime?         @db.Date
  createdAt         DateTime?         @default(now(), map: "DF__User__createdAt__52593CB8") @db.DateTime
  updatedAt         DateTime?         @default(now(), map: "DF__User__updatedAt__534D60F1") @updatedAt @db.DateTime
  academicProfile   AcademicProfile?
  assignedSchedules ClassSchedule[]   @relation("ClassScheduleAssignedBy")
  familyInfo        FamilyInfo?
  personalProfile   PersonalProfile?
  scheduleApprovals ScheduleRequest[] @relation("ScheduleRequestApprover")
  scheduleRequests  ScheduleRequest[] @relation("ScheduleRequestRequester")
  student           Student?
  teacher           Teacher?
  account           Account           @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK__User__accountId__5441852A")
}

model PersonalProfile {
  id                Int       @id(map: "PK__Personal__3213E83F8F388670") @default(autoincrement())
  userId            Int       @unique(map: "UQ__Personal__CB9A1CFE3DB7A35D")
  idCardNumber      String?   @db.NVarChar(50)
  idCardIssueDate   DateTime? @db.Date
  idCardIssuePlace  String?   @db.NVarChar(255)
  placeOfBirth      String?   @db.NVarChar(255)
  permanentAddress  String?   @db.NVarChar(500)
  phoneEmergency    String?   @db.NVarChar(50)
  bankName          String?   @db.NVarChar(255)
  bankBranch        String?   @db.NVarChar(255)
  bankAccountNumber String?   @db.NVarChar(50)
  createdAt         DateTime? @default(now(), map: "DF__PersonalP__creat__5812160E") @db.DateTime
  updatedAt         DateTime? @default(now(), map: "DF__PersonalP__updat__59063A47") @updatedAt @db.DateTime
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK__PersonalP__userI__59FA5E80")
}

model FamilyInfo {
  id                Int       @id(map: "PK__FamilyIn__3213E83F7A352344") @default(autoincrement())
  userId            Int       @unique(map: "UQ__FamilyIn__CB9A1CFE21587007")
  fatherFullName    String?   @db.NVarChar(255)
  fatherYearOfBirth Int?
  fatherPhone       String?   @db.NVarChar(50)
  motherFullName    String?   @db.NVarChar(255)
  motherYearOfBirth Int?
  motherPhone       String?   @db.NVarChar(50)
  createdAt         DateTime? @default(now(), map: "DF__FamilyInf__creat__5DCAEF64") @db.DateTime
  updatedAt         DateTime? @default(now(), map: "DF__FamilyInf__updat__5EBF139D") @updatedAt @db.DateTime
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK__FamilyInf__userI__5FB337D6")
}

model AcademicProfile {
  id             Int       @id(map: "PK__Academic__3213E83FF84BF71F") @default(autoincrement())
  userId         Int       @unique(map: "UQ__Academic__CB9A1CFE3512CE87")
  role           String    @db.NVarChar(20)
  campus         String?   @db.NVarChar(255)
  trainingType   String?   @db.NVarChar(255)
  degreeLevel    String?   @db.NVarChar(255)
  academicYear   String?   @db.NVarChar(50)
  enrollmentDate DateTime? @db.Date
  classCode      String?   @db.NVarChar(50)
  title          String?   @db.NVarChar(255)
  createdAt      DateTime? @default(now(), map: "DF__AcademicP__creat__6383C8BA") @db.DateTime
  updatedAt      DateTime? @default(now(), map: "DF__AcademicP__updat__6477ECF3") @updatedAt @db.DateTime
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK__AcademicP__userI__656C112C")
}

model Department {
  id         Int         @id(map: "PK__Departme__3213E83F79EA78B3") @default(autoincrement())
  code       String      @unique(map: "UQ__Departme__357D4CF9E0BA0B8F") @db.NVarChar(50)
  name       String      @unique(map: "UQ__Departme__72E12F1B933F4561") @db.NVarChar(255)
  createdAt  DateTime?   @default(now(), map: "DF__Departmen__creat__412EB0B6") @db.DateTime
  updatedAt  DateTime?   @default(now(), map: "DF__Departmen__updat__4222D4EF") @updatedAt @db.DateTime
  classes    Class[]     @relation("ClassDepartment")
  classRooms ClassRoom[] @relation("ClassRoomDepartment")
  majors     Major[]
  students   Student[]   @relation("StudentDepartment")
  teachers   Teacher[]   @relation("TeacherDepartment")
}

model Major {
  id           Int        @id(map: "PK__Major__3213E83F58BFD26A") @default(autoincrement())
  code         String     @unique(map: "UQ__Major__357D4CF9710A7320") @db.NVarChar(50)
  name         String     @db.NVarChar(255)
  departmentId Int
  createdAt    DateTime?  @default(now(), map: "DF__Major__createdAt__45F365D3") @db.DateTime
  updatedAt    DateTime?  @default(now(), map: "DF__Major__updatedAt__46E78A0C") @updatedAt @db.DateTime
  classes      Class[]    @relation("ClassMajor")
  department   Department @relation(fields: [departmentId], references: [id], onUpdate: NoAction, map: "FK__Major__departmen__47DBAE45")
  students     Student[]  @relation("StudentMajor")
  teachers     Teacher[]  @relation("TeacherMajor")
}

model Teacher {
  id                         Int               @id(map: "PK__Teacher__3213E83F486D6B33") @default(autoincrement())
  userId                     Int               @unique(map: "UQ__Teacher__CB9A1CFEDF5A1F62")
  teacherCode                String            @unique(map: "UQ__Teacher__3644755CA5FFF514") @db.NVarChar(50)
  departmentId               Int?
  majorId                    Int?
  createdAt                  DateTime?         @default(now(), map: "DF__Teacher__created__6A30C649") @db.DateTime
  updatedAt                  DateTime?         @default(now(), map: "DF__Teacher__updated__6B24EA82") @updatedAt @db.DateTime
  classes                    Class[]           @relation("ClassTeacher")
  classSchedules             ClassSchedule[]   @relation("ClassScheduleTeacher")
  scheduleRequestSubstitutes ScheduleRequest[] @relation("ScheduleRequestSubstitute")
  department                 Department?       @relation("TeacherDepartment", fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__Teacher__departm__6D0D32F4")
  major                      Major?            @relation("TeacherMajor", fields: [majorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__Teacher__majorId__6E01572D")
  user                       User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK__Teacher__userId__6C190EBB")
}

model Student {
  id            Int            @id(map: "PK__Student__3213E83F85FE96F3") @default(autoincrement())
  userId        Int            @unique(map: "UQ__Student__CB9A1CFECCF61E4A")
  studentCode   String         @unique(map: "UQ__Student__48F7EF364B99BB01") @db.NVarChar(50)
  departmentId  Int?
  majorId       Int?
  createdAt     DateTime?      @default(now(), map: "DF__Student__created__72C60C4A") @db.DateTime
  updatedAt     DateTime?      @default(now(), map: "DF__Student__updated__73BA3083") @updatedAt @db.DateTime
  classStudents ClassStudent[]
  department    Department?    @relation("StudentDepartment", fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__Student__departm__75A278F5")
  major         Major?         @relation("StudentMajor", fields: [majorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__Student__majorId__76969D2E")
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK__Student__userId__74AE54BC")
}

model Class {
  id              Int             @id(map: "PK__Class__3213E83FAA15EE0C") @default(autoincrement())
  code            String          @unique(map: "UQ__Class__357D4CF9A9824056") @db.NVarChar(50)
  className       String          @db.NVarChar(255)
  subjectName     String          @db.NVarChar(255)
  subjectCode     String          @db.NVarChar(50)
  credits         Int
  teacherId       Int
  departmentId    Int
  majorId         Int?
  semester        String          @db.NVarChar(50)
  academicYear    String          @db.NVarChar(50)
  maxStudents     Int
  totalWeeks      Int
  startDate       DateTime        @db.Date
  endDate         DateTime        @db.Date
  classRoomTypeId Int
  description     String?         @db.NVarChar(Max)
  createdAt       DateTime?       @default(now(), map: "DF__Class__createdAt__7A672E12") @db.DateTime
  updatedAt       DateTime?       @default(now(), map: "DF__Class__updatedAt__7B5B524B") @updatedAt @db.DateTime
  ClassRoomType   ClassRoomType   @relation(fields: [classRoomTypeId], references: [id], onUpdate: NoAction, map: "FK__Class__classRoom__7F2BE32F")
  department      Department      @relation("ClassDepartment", fields: [departmentId], references: [id], onUpdate: NoAction, map: "FK__Class__departmen__7D439ABD")
  major           Major?          @relation("ClassMajor", fields: [majorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__Class__majorId__7E37BEF6")
  teacher         Teacher         @relation("ClassTeacher", fields: [teacherId], references: [id], onUpdate: NoAction, map: "FK__Class__teacherId__7C4F7684")
  classSchedules  ClassSchedule[]
  classStudents   ClassStudent[]

  @@map("Class")
}

model ClassStudent {
  id               Int            @id(map: "PK__ClassStu__3213E83F31BC2F43") @default(autoincrement())
  classId          Int
  studentId        Int
  groupNumber      Int?
  academicStatusId Int            @default(1, map: "DF__ClassStud__acade__02FC7413")
  joinedAt         DateTime?      @default(now(), map: "DF__ClassStud__joine__03F0984C") @db.DateTime
  AcademicStatus   AcademicStatus @relation(fields: [academicStatusId], references: [id], onUpdate: NoAction, map: "FK__ClassStud__acade__06CD04F7")
  class            Class          @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK__ClassStud__class__04E4BC85")
  student          Student        @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK__ClassStud__stude__05D8E0BE")

  @@unique([classId, studentId], map: "UQ__ClassStu__A1A6291C78A251C0")
  @@map("ClassStudent")
}

model ClassRoom {
  id                        Int               @id(map: "PK__ClassRoo__3213E83F945D35BD") @default(autoincrement())
  code                      String            @unique(map: "UQ__ClassRoo__357D4CF9585A3F85") @db.NVarChar(50)
  name                      String            @db.NVarChar(255)
  capacity                  Int
  building                  String            @db.NVarChar(255)
  floor                     Int
  campus                    String?           @db.NVarChar(255)
  classRoomTypeId           Int
  departmentId              Int?
  isAvailable               Boolean           @default(true, map: "DF__ClassRoom__isAva__0A9D95DB")
  description               String?           @db.NVarChar(Max)
  createdAt                 DateTime?         @default(now(), map: "DF__ClassRoom__creat__0B91BA14") @db.DateTime
  updatedAt                 DateTime?         @default(now(), map: "DF__ClassRoom__updat__0C85DE4D") @updatedAt @db.DateTime
  ClassRoomType             ClassRoomType     @relation(fields: [classRoomTypeId], references: [id], onUpdate: NoAction, map: "FK__ClassRoom__class__0E6E26BF")
  department                Department?       @relation("ClassRoomDepartment", fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__ClassRoom__depar__0D7A0286")
  classSchedules            ClassSchedule[]
  scheduleRequestRooms      ScheduleRequest[] @relation("ScheduleRequestRoom")
  scheduleRequestMovedRooms ScheduleRequest[] @relation("ScheduleRequestMovedRoom")
  scheduleRequestNewRooms   ScheduleRequest[] @relation("ScheduleRequestNewRoom")
  scheduleRequestOldRooms   ScheduleRequest[] @relation("ScheduleRequestOldRoom")
}

model TimeSlot {
  id                        Int               @id(map: "PK__TimeSlot__3213E83F33FD7965") @default(autoincrement())
  slotName                  String            @db.NVarChar(50)
  startTime                 DateTime          @db.Time
  endTime                   DateTime          @db.Time
  shift                     Int
  classSchedules            ClassSchedule[]
  scheduleRequestMovedTimes ScheduleRequest[] @relation("ScheduleRequestMovedTime")
  scheduleRequestNewTimes   ScheduleRequest[] @relation("ScheduleRequestNewTime")
  scheduleRequestOldTimes   ScheduleRequest[] @relation("ScheduleRequestOldTime")
}

model ClassSchedule {
  id               Int               @id(map: "PK__ClassSch__3213E83F0209B74C") @default(autoincrement())
  classId          Int
  teacherId        Int
  classRoomId      Int?
  dayOfWeek        Int
  timeSlotId       Int
  classRoomTypeId  Int
  practiceGroup    Int?
  weekPattern      String            @default("weekly", map: "DF__ClassSche__weekP__1332DBDC") @db.NVarChar(50)
  startWeek        Int
  endWeek          Int
  statusId         Int               @default(1, map: "DF__ClassSche__statu__14270015")
  assignedBy       Int?
  assignedAt       DateTime?         @db.DateTime
  note             String?           @db.NVarChar(Max)
  createdAt        DateTime?         @default(now(), map: "DF__ClassSche__creat__151B244E") @db.DateTime
  updatedAt        DateTime?         @default(now(), map: "DF__ClassSche__updat__160F4887") @updatedAt @db.DateTime
  assignedByUser   User?             @relation("ClassScheduleAssignedBy", fields: [assignedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__ClassSche__assig__1AD3FDA4")
  class            Class             @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK__ClassSche__class__17036CC0")
  classRoom        ClassRoom?        @relation(fields: [classRoomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__ClassSche__class__18EBB532")
  ClassRoomType    ClassRoomType     @relation(fields: [classRoomTypeId], references: [id], onUpdate: NoAction, map: "FK__ClassSche__class__1AD3FDA4")
  RequestType      RequestType       @relation(fields: [statusId], references: [id], onUpdate: NoAction, map: "FK__ClassSche__statu__1BC821DD")
  teacher          Teacher           @relation("ClassScheduleTeacher", fields: [teacherId], references: [id], onUpdate: NoAction, map: "FK__ClassSche__teach__17F790F9")
  timeSlot         TimeSlot          @relation(fields: [timeSlotId], references: [id], onUpdate: NoAction, map: "FK__ClassSche__timeS__19DFD96B")
  scheduleRequests ScheduleRequest[]
}

model ScheduleRequest {
  id                  Int            @id(map: "PK__Schedule__3213E83FA66B0412") @default(autoincrement())
  requestTypeId       Int
  classScheduleId     Int?
  classRoomId         Int?
  requesterId         Int
  requestDate         DateTime       @db.Date
  timeSlotId          Int
  changeType          String?        @db.NVarChar(50)
  oldClassRoomId      Int?
  newClassRoomId      Int?
  oldTimeSlotId       Int?
  newTimeSlotId       Int?
  exceptionDate       DateTime?      @db.Date
  exceptionType       String?        @db.NVarChar(50)
  movedToDate         DateTime?      @db.Date
  movedToTimeSlotId   Int?
  movedToClassRoomId  Int?
  substituteTeacherId Int?
  reason              String         @db.NVarChar(Max)
  approvedBy          Int?
  requestStatusId     Int            @default(1, map: "DF__ScheduleR__reque__1F98B2C1")
  approvedAt          DateTime?      @db.DateTime
  note                String?        @db.NVarChar(Max)
  createdAt           DateTime?      @default(now(), map: "DF__ScheduleR__creat__208CD6FA") @db.DateTime
  updatedAt           DateTime?      @default(now(), map: "DF__ScheduleR__updat__2180FB33") @updatedAt @db.DateTime
  approver            User?          @relation("ScheduleRequestApprover", fields: [approvedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__ScheduleR__appro__2A164134")
  classSchedule       ClassSchedule? @relation(fields: [classScheduleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK__ScheduleR__class__208CD6FA")
  classRoom           ClassRoom?     @relation("ScheduleRequestRoom", fields: [classRoomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__ScheduleR__class__2180FB33")
  movedToTimeSlot     TimeSlot?      @relation("ScheduleRequestMovedTime", fields: [movedToTimeSlotId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__ScheduleR__moved__2645B050")
  movedToClassRoom    ClassRoom?     @relation("ScheduleRequestMovedRoom", fields: [movedToClassRoomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__ScheduleR__moved__2739D489")
  newClassRoom        ClassRoom?     @relation("ScheduleRequestNewRoom", fields: [newClassRoomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__ScheduleR__newCl__236943A5")
  newTimeSlot         TimeSlot?      @relation("ScheduleRequestNewTime", fields: [newTimeSlotId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__ScheduleR__newTi__25518C17")
  oldClassRoom        ClassRoom?     @relation("ScheduleRequestOldRoom", fields: [oldClassRoomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__ScheduleR__oldCl__22751F6C")
  oldTimeSlot         TimeSlot?      @relation("ScheduleRequestOldTime", fields: [oldTimeSlotId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__ScheduleR__oldTi__245D67DE")
  requester           User           @relation("ScheduleRequestRequester", fields: [requesterId], references: [id], onUpdate: NoAction, map: "FK__ScheduleR__reque__29221CFB")
  RequestType         RequestType    @relation(fields: [requestTypeId], references: [id], onUpdate: NoAction, map: "FK__ScheduleR__reque__2B0A656D")
  RequestStatus       RequestStatus  @relation(fields: [requestStatusId], references: [id], onUpdate: NoAction, map: "FK__ScheduleR__reque__2BFE89A6")
  substituteTeacher   Teacher?       @relation("ScheduleRequestSubstitute", fields: [substituteTeacherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__ScheduleR__subst__282DF8C2")
}

model AcademicStatus {
  id           Int            @id(map: "PK__Academic__3213E83F69912D48") @default(autoincrement())
  name         String         @db.NVarChar(255)
  ClassStudent ClassStudent[]
}

model ClassRoomType {
  id            Int             @id(map: "PK__ClassRoo__3213E83FC31F5FCA") @default(autoincrement())
  name          String          @db.NVarChar(255)
  Class         Class[]
  ClassRoom     ClassRoom[]
  ClassSchedule ClassSchedule[]
}

model RequestStatus {
  id              Int               @id(map: "PK__RequestS__3213E83FEEB6D0F2") @default(autoincrement())
  name            String            @db.NVarChar(255)
  ScheduleRequest ScheduleRequest[]
}

model RequestType {
  id              Int               @id(map: "PK__RequestT__3213E83F3C225963") @default(autoincrement())
  name            String            @db.NVarChar(255)
  ClassSchedule   ClassSchedule[]
  ScheduleRequest ScheduleRequest[]
}
